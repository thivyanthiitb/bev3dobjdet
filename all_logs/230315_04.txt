No protocol specified
No protocol specified
Authorization required, but no authorization protocol specified
2024-03-14 22:28:50,521 - mmdet3d - INFO - Config:
{   'augment2d': {   'gridmask': {'fixed_prob': True, 'prob': 0.0},
                     'resize': [[0.38, 0.55], [0.48, 0.48]],
                     'rotate': [-5.4, 5.4]},
    'augment3d': {   'rotate': [-0.78539816, 0.78539816],
                     'scale': [0.9, 1.1],
                     'translate': 0.5},
    'checkpoint_config': {'interval': 1, 'max_keep_ckpts': 1},
    'cudnn_benchmark': False,
    'data': {   'samples_per_gpu': 2,
                'test': {   'ann_file': 'data/nuscenes/nuscenes_infos_val.pkl',
                            'box_type_3d': 'LiDAR',
                            'dataset_root': 'data/nuscenes/',
                            'map_classes': [   'drivable_area',
                                               'ped_crossing',
                                               'walkway',
                                               'stop_line',
                                               'carpark_area',
                                               'divider'],
                            'modality': {   'use_camera': True,
                                            'use_external': False,
                                            'use_lidar': True,
                                            'use_map': False,
                                            'use_radar': False},
                            'object_classes': [   'car',
                                                  'truck',
                                                  'construction_vehicle',
                                                  'bus',
                                                  'trailer',
                                                  'barrier',
                                                  'motorcycle',
                                                  'bicycle',
                                                  'pedestrian',
                                                  'traffic_cone'],
                            'pipeline': [   {   'to_float32': True,
                                                'type': 'LoadMultiViewImageFromFiles'},
                                            {   'coord_type': 'LIDAR',
                                                'load_augmented': None,
                                                'load_dim': 5,
                                                'reduce_beams': 32,
                                                'type': 'LoadPointsFromFile',
                                                'use_dim': 5},
                                            {   'load_augmented': None,
                                                'load_dim': 5,
                                                'pad_empty_sweeps': True,
                                                'reduce_beams': 32,
                                                'remove_close': True,
                                                'sweeps_num': 9,
                                                'type': 'LoadPointsFromMultiSweeps',
                                                'use_dim': 5},
                                            {   'compensate_velocity': True,
                                                'filtering': 'none',
                                                'load_dim': 18,
                                                'max_num': 2500,
                                                'normalize': False,
                                                'sweeps_num': 6,
                                                'type': 'LoadRadarPointsMultiSweeps',
                                                'use_dim': [   0,
                                                               1,
                                                               2,
                                                               5,
                                                               8,
                                                               9,
                                                               18,
                                                               19,
                                                               20,
                                                               21,
                                                               22,
                                                               23,
                                                               24,
                                                               25,
                                                               26,
                                                               27,
                                                               28,
                                                               29,
                                                               30,
                                                               31,
                                                               32,
                                                               33,
                                                               34,
                                                               35,
                                                               36,
                                                               37,
                                                               38,
                                                               39,
                                                               40,
                                                               41,
                                                               42,
                                                               43,
                                                               44,
                                                               45,
                                                               46,
                                                               47,
                                                               48,
                                                               49,
                                                               50,
                                                               51,
                                                               52,
                                                               53,
                                                               54,
                                                               55,
                                                               56]},
                                            {   'type': 'LoadAnnotations3D',
                                                'with_attr_label': False,
                                                'with_bbox_3d': True,
                                                'with_label_3d': True},
                                            {   'bot_pct_lim': [0.0, 0.0],
                                                'final_dim': [256, 704],
                                                'is_train': False,
                                                'rand_flip': False,
                                                'resize_lim': [0.48, 0.48],
                                                'rot_lim': [0.0, 0.0],
                                                'type': 'ImageAug3D'},
                                            {   'is_train': False,
                                                'resize_lim': [1.0, 1.0],
                                                'rot_lim': [0.0, 0.0],
                                                'trans_lim': 0.0,
                                                'type': 'GlobalRotScaleTrans'},
                                            {   'point_cloud_range': [   -54.0,
                                                                         -54.0,
                                                                         -5.0,
                                                                         54.0,
                                                                         54.0,
                                                                         3.0],
                                                'type': 'PointsRangeFilter'},
                                            {   'mean': [0.485, 0.456, 0.406],
                                                'std': [0.229, 0.224, 0.225],
                                                'type': 'ImageNormalize'},
                                            {   'classes': [   'car',
                                                               'truck',
                                                               'construction_vehicle',
                                                               'bus',
                                                               'trailer',
                                                               'barrier',
                                                               'motorcycle',
                                                               'bicycle',
                                                               'pedestrian',
                                                               'traffic_cone'],
                                                'type': 'DefaultFormatBundle3D'},
                                            {   'keys': [   'img',
                                                            'points',
                                                            'radar',
                                                            'gt_bboxes_3d',
                                                            'gt_labels_3d'],
                                                'meta_keys': [   'camera_intrinsics',
                                                                 'camera2ego',
                                                                 'lidar2ego',
                                                                 'lidar2camera',
                                                                 'lidar2image',
                                                                 'camera2lidar',
                                                                 'img_aug_matrix',
                                                                 'lidar_aug_matrix'],
                                                'type': 'Collect3D'},
                                            {   'keyframe_only': True,
                                                'type': 'GTDepth'}],
                            'test_mode': True,
                            'type': 'NuScenesDataset'},
                'train': {   'dataset': {   'ann_file': 'data/nuscenes/nuscenes_infos_train.pkl',
                                            'box_type_3d': 'LiDAR',
                                            'dataset_root': 'data/nuscenes/',
                                            'map_classes': [   'drivable_area',
                                                               'ped_crossing',
                                                               'walkway',
                                                               'stop_line',
                                                               'carpark_area',
                                                               'divider'],
                                            'modality': {   'use_camera': True,
                                                            'use_external': False,
                                                            'use_lidar': True,
                                                            'use_map': False,
                                                            'use_radar': False},
                                            'object_classes': [   'car',
                                                                  'truck',
                                                                  'construction_vehicle',
                                                                  'bus',
                                                                  'trailer',
                                                                  'barrier',
                                                                  'motorcycle',
                                                                  'bicycle',
                                                                  'pedestrian',
                                                                  'traffic_cone'],
                                            'pipeline': [   {   'to_float32': True,
                                                                'type': 'LoadMultiViewImageFromFiles'},
                                                            {   'coord_type': 'LIDAR',
                                                                'load_augmented': None,
                                                                'load_dim': 5,
                                                                'reduce_beams': 32,
                                                                'type': 'LoadPointsFromFile',
                                                                'use_dim': 5},
                                                            {   'load_augmented': None,
                                                                'load_dim': 5,
                                                                'pad_empty_sweeps': True,
                                                                'reduce_beams': 32,
                                                                'remove_close': True,
                                                                'sweeps_num': 0,
                                                                'type': 'LoadPointsFromMultiSweeps',
                                                                'use_dim': 5},
                                                            {   'compensate_velocity': True,
                                                                'filtering': 'none',
                                                                'load_dim': 18,
                                                                'max_num': 2500,
                                                                'normalize': False,
                                                                'sweeps_num': 6,
                                                                'type': 'LoadRadarPointsMultiSweeps',
                                                                'use_dim': [   0,
                                                                               1,
                                                                               2,
                                                                               5,
                                                                               8,
                                                                               9,
                                                                               18,
                                                                               19,
                                                                               20,
                                                                               21,
                                                                               22,
                                                                               23,
                                                                               24,
                                                                               25,
                                                                               26,
                                                                               27,
                                                                               28,
                                                                               29,
                                                                               30,
                                                                               31,
                                                                               32,
                                                                               33,
                                                                               34,
                                                                               35,
                                                                               36,
                                                                               37,
                                                                               38,
                                                                               39,
                                                                               40,
                                                                               41,
                                                                               42,
                                                                               43,
                                                                               44,
                                                                               45,
                                                                               46,
                                                                               47,
                                                                               48,
                                                                               49,
                                                                               50,
                                                                               51,
                                                                               52,
                                                                               53,
                                                                               54,
                                                                               55,
                                                                               56]},
                                                            {   'type': 'LoadAnnotations3D',
                                                                'with_attr_label': False,
                                                                'with_bbox_3d': True,
                                                                'with_label_3d': True},
                                                            {   'db_sampler': {   'classes': [   'car',
                                                                                                 'truck',
                                                                                                 'construction_vehicle',
                                                                                                 'bus',
                                                                                                 'trailer',
                                                                                                 'barrier',
                                                                                                 'motorcycle',
                                                                                                 'bicycle',
                                                                                                 'pedestrian',
                                                                                                 'traffic_cone'],
                                                                                  'dataset_root': 'data/nuscenes/',
                                                                                  'info_path': 'data/nuscenes/nuscenes_dbinfos_train.pkl',
                                                                                  'points_loader': {   'coord_type': 'LIDAR',
                                                                                                       'load_dim': 5,
                                                                                                       'reduce_beams': 32,
                                                                                                       'type': 'LoadPointsFromFile',
                                                                                                       'use_dim': 5},
                                                                                  'prepare': {   'filter_by_difficulty': [   -1],
                                                                                                 'filter_by_min_points': {   'barrier': 5,
                                                                                                                             'bicycle': 5,
                                                                                                                             'bus': 5,
                                                                                                                             'car': 5,
                                                                                                                             'construction_vehicle': 5,
                                                                                                                             'motorcycle': 5,
                                                                                                                             'pedestrian': 5,
                                                                                                                             'traffic_cone': 5,
                                                                                                                             'trailer': 5,
                                                                                                                             'truck': 5}},
                                                                                  'rate': 1.0,
                                                                                  'sample_groups': {   'barrier': 2,
                                                                                                       'bicycle': 6,
                                                                                                       'bus': 4,
                                                                                                       'car': 2,
                                                                                                       'construction_vehicle': 7,
                                                                                                       'motorcycle': 6,
                                                                                                       'pedestrian': 2,
                                                                                                       'traffic_cone': 2,
                                                                                                       'trailer': 6,
                                                                                                       'truck': 3}},
                                                                'stop_epoch': -1,
                                                                'type': 'ObjectPaste'},
                                                            {   'bot_pct_lim': [   0.0,
                                                                                   0.0],
                                                                'final_dim': [   256,
                                                                                 704],
                                                                'is_train': True,
                                                                'rand_flip': True,
                                                                'resize_lim': [   0.38,
                                                                                  0.55],
                                                                'rot_lim': [   -5.4,
                                                                               5.4],
                                                                'type': 'ImageAug3D'},
                                                            {   'is_train': True,
                                                                'resize_lim': [   0.9,
                                                                                  1.1],
                                                                'rot_lim': [   -0.78539816,
                                                                               0.78539816],
                                                                'trans_lim': 0.5,
                                                                'type': 'GlobalRotScaleTrans'},
                                                            {   'type': 'RandomFlip3D'},
                                                            {   'point_cloud_range': [   -54.0,
                                                                                         -54.0,
                                                                                         -5.0,
                                                                                         54.0,
                                                                                         54.0,
                                                                                         3.0],
                                                                'type': 'PointsRangeFilter'},
                                                            {   'point_cloud_range': [   -54.0,
                                                                                         -54.0,
                                                                                         -5.0,
                                                                                         54.0,
                                                                                         54.0,
                                                                                         3.0],
                                                                'type': 'ObjectRangeFilter'},
                                                            {   'classes': [   'car',
                                                                               'truck',
                                                                               'construction_vehicle',
                                                                               'bus',
                                                                               'trailer',
                                                                               'barrier',
                                                                               'motorcycle',
                                                                               'bicycle',
                                                                               'pedestrian',
                                                                               'traffic_cone'],
                                                                'type': 'ObjectNameFilter'},
                                                            {   'mean': [   0.485,
                                                                            0.456,
                                                                            0.406],
                                                                'std': [   0.229,
                                                                           0.224,
                                                                           0.225],
                                                                'type': 'ImageNormalize'},
                                                            {   'fixed_prob': True,
                                                                'max_epoch': 6,
                                                                'mode': 1,
                                                                'offset': False,
                                                                'prob': 0.0,
                                                                'ratio': 0.5,
                                                                'rotate': 1,
                                                                'type': 'GridMask',
                                                                'use_h': True,
                                                                'use_w': True},
                                                            {   'type': 'PointShuffle'},
                                                            {   'classes': [   'car',
                                                                               'truck',
                                                                               'construction_vehicle',
                                                                               'bus',
                                                                               'trailer',
                                                                               'barrier',
                                                                               'motorcycle',
                                                                               'bicycle',
                                                                               'pedestrian',
                                                                               'traffic_cone'],
                                                                'type': 'DefaultFormatBundle3D'},
                                                            {   'keys': [   'img',
                                                                            'points',
                                                                            'radar',
                                                                            'gt_bboxes_3d',
                                                                            'gt_labels_3d'],
                                                                'meta_keys': [   'camera_intrinsics',
                                                                                 'camera2ego',
                                                                                 'lidar2ego',
                                                                                 'lidar2camera',
                                                                                 'lidar2image',
                                                                                 'camera2lidar',
                                                                                 'img_aug_matrix',
                                                                                 'lidar_aug_matrix'],
                                                                'type': 'Collect3D'},
                                                            {   'keyframe_only': True,
                                                                'type': 'GTDepth'}],
                                            'test_mode': False,
                                            'type': 'NuScenesDataset',
                                            'use_valid_flag': True},
                             'type': 'CBGSDataset'},
                'val': {   'ann_file': 'data/nuscenes/nuscenes_infos_val.pkl',
                           'box_type_3d': 'LiDAR',
                           'dataset_root': 'data/nuscenes/',
                           'map_classes': [   'drivable_area',
                                              'ped_crossing',
                                              'walkway',
                                              'stop_line',
                                              'carpark_area',
                                              'divider'],
                           'modality': {   'use_camera': True,
                                           'use_external': False,
                                           'use_lidar': True,
                                           'use_map': False,
                                           'use_radar': False},
                           'object_classes': [   'car',
                                                 'truck',
                                                 'construction_vehicle',
                                                 'bus',
                                                 'trailer',
                                                 'barrier',
                                                 'motorcycle',
                                                 'bicycle',
                                                 'pedestrian',
                                                 'traffic_cone'],
                           'pipeline': [   {   'to_float32': True,
                                               'type': 'LoadMultiViewImageFromFiles'},
                                           {   'coord_type': 'LIDAR',
                                               'load_augmented': None,
                                               'load_dim': 5,
                                               'reduce_beams': 32,
                                               'type': 'LoadPointsFromFile',
                                               'use_dim': 5},
                                           {   'load_augmented': None,
                                               'load_dim': 5,
                                               'pad_empty_sweeps': True,
                                               'reduce_beams': 32,
                                               'remove_close': True,
                                               'sweeps_num': 9,
                                               'type': 'LoadPointsFromMultiSweeps',
                                               'use_dim': 5},
                                           {   'compensate_velocity': True,
                                               'filtering': 'none',
                                               'load_dim': 18,
                                               'max_num': 2500,
                                               'normalize': False,
                                               'sweeps_num': 6,
                                               'type': 'LoadRadarPointsMultiSweeps',
                                               'use_dim': [   0,
                                                              1,
                                                              2,
                                                              5,
                                                              8,
                                                              9,
                                                              18,
                                                              19,
                                                              20,
                                                              21,
                                                              22,
                                                              23,
                                                              24,
                                                              25,
                                                              26,
                                                              27,
                                                              28,
                                                              29,
                                                              30,
                                                              31,
                                                              32,
                                                              33,
                                                              34,
                                                              35,
                                                              36,
                                                              37,
                                                              38,
                                                              39,
                                                              40,
                                                              41,
                                                              42,
                                                              43,
                                                              44,
                                                              45,
                                                              46,
                                                              47,
                                                              48,
                                                              49,
                                                              50,
                                                              51,
                                                              52,
                                                              53,
                                                              54,
                                                              55,
                                                              56]},
                                           {   'type': 'LoadAnnotations3D',
                                               'with_attr_label': False,
                                               'with_bbox_3d': True,
                                               'with_label_3d': True},
                                           {   'bot_pct_lim': [0.0, 0.0],
                                               'final_dim': [256, 704],
                                               'is_train': False,
                                               'rand_flip': False,
                                               'resize_lim': [0.48, 0.48],
                                               'rot_lim': [0.0, 0.0],
                                               'type': 'ImageAug3D'},
                                           {   'is_train': False,
                                               'resize_lim': [1.0, 1.0],
                                               'rot_lim': [0.0, 0.0],
                                               'trans_lim': 0.0,
                                               'type': 'GlobalRotScaleTrans'},
                                           {   'point_cloud_range': [   -54.0,
                                                                        -54.0,
                                                                        -5.0,
                                                                        54.0,
                                                                        54.0,
                                                                        3.0],
                                               'type': 'PointsRangeFilter'},
                                           {   'mean': [0.485, 0.456, 0.406],
                                               'std': [0.229, 0.224, 0.225],
                                               'type': 'ImageNormalize'},
                                           {   'classes': [   'car',
                                                              'truck',
                                                              'construction_vehicle',
                                                              'bus',
                                                              'trailer',
                                                              'barrier',
                                                              'motorcycle',
                                                              'bicycle',
                                                              'pedestrian',
                                                              'traffic_cone'],
                                               'type': 'DefaultFormatBundle3D'},
                                           {   'keys': [   'img',
                                                           'points',
                                                           'radar',
                                                           'gt_bboxes_3d',
                                                           'gt_labels_3d'],
                                               'meta_keys': [   'camera_intrinsics',
                                                                'camera2ego',
                                                                'lidar2ego',
                                                                'lidar2camera',
                                                                'lidar2image',
                                                                'camera2lidar',
                                                                'img_aug_matrix',
                                                                'lidar_aug_matrix'],
                                               'type': 'Collect3D'},
                                           {   'keyframe_only': True,
                                               'type': 'GTDepth'}],
                           'test_mode': False,
                           'type': 'NuScenesDataset'},
                'workers_per_gpu': 4},
    'dataset_root': 'data/nuscenes/',
    'dataset_type': 'NuScenesDataset',
    'deterministic': False,
    'evaluation': {   'interval': 1,
                      'pipeline': [   {   'to_float32': True,
                                          'type': 'LoadMultiViewImageFromFiles'},
                                      {   'coord_type': 'LIDAR',
                                          'load_augmented': None,
                                          'load_dim': 5,
                                          'reduce_beams': 32,
                                          'type': 'LoadPointsFromFile',
                                          'use_dim': 5},
                                      {   'load_augmented': None,
                                          'load_dim': 5,
                                          'pad_empty_sweeps': True,
                                          'reduce_beams': 32,
                                          'remove_close': True,
                                          'sweeps_num': 9,
                                          'type': 'LoadPointsFromMultiSweeps',
                                          'use_dim': 5},
                                      {   'compensate_velocity': True,
                                          'filtering': 'none',
                                          'load_dim': 18,
                                          'max_num': 2500,
                                          'normalize': False,
                                          'sweeps_num': 6,
                                          'type': 'LoadRadarPointsMultiSweeps',
                                          'use_dim': [   0,
                                                         1,
                                                         2,
                                                         5,
                                                         8,
                                                         9,
                                                         18,
                                                         19,
                                                         20,
                                                         21,
                                                         22,
                                                         23,
                                                         24,
                                                         25,
                                                         26,
                                                         27,
                                                         28,
                                                         29,
                                                         30,
                                                         31,
                                                         32,
                                                         33,
                                                         34,
                                                         35,
                                                         36,
                                                         37,
                                                         38,
                                                         39,
                                                         40,
                                                         41,
                                                         42,
                                                         43,
                                                         44,
                                                         45,
                                                         46,
                                                         47,
                                                         48,
                                                         49,
                                                         50,
                                                         51,
                                                         52,
                                                         53,
                                                         54,
                                                         55,
                                                         56]},
                                      {   'type': 'LoadAnnotations3D',
                                          'with_attr_label': False,
                                          'with_bbox_3d': True,
                                          'with_label_3d': True},
                                      {   'bot_pct_lim': [0.0, 0.0],
                                          'final_dim': [256, 704],
                                          'is_train': False,
                                          'rand_flip': False,
                                          'resize_lim': [0.48, 0.48],
                                          'rot_lim': [0.0, 0.0],
                                          'type': 'ImageAug3D'},
                                      {   'is_train': False,
                                          'resize_lim': [1.0, 1.0],
                                          'rot_lim': [0.0, 0.0],
                                          'trans_lim': 0.0,
                                          'type': 'GlobalRotScaleTrans'},
                                      {   'point_cloud_range': [   -54.0,
                                                                   -54.0,
                                                                   -5.0,
                                                                   54.0,
                                                                   54.0,
                                                                   3.0],
                                          'type': 'PointsRangeFilter'},
                                      {   'mean': [0.485, 0.456, 0.406],
                                          'std': [0.229, 0.224, 0.225],
                                          'type': 'ImageNormalize'},
                                      {   'classes': [   'car',
                                                         'truck',
                                                         'construction_vehicle',
                                                         'bus',
                                                         'trailer',
                                                         'barrier',
                                                         'motorcycle',
                                                         'bicycle',
                                                         'pedestrian',
                                                         'traffic_cone'],
                                          'type': 'DefaultFormatBundle3D'},
                                      {   'keys': [   'img',
                                                      'points',
                                                      'radar',
                                                      'gt_bboxes_3d',
                                                      'gt_labels_3d'],
                                          'meta_keys': [   'camera_intrinsics',
                                                           'camera2ego',
                                                           'lidar2ego',
                                                           'lidar2camera',
                                                           'lidar2image',
                                                           'camera2lidar',
                                                           'img_aug_matrix',
                                                           'lidar_aug_matrix'],
                                          'type': 'Collect3D'},
                                      {   'keyframe_only': True,
                                          'type': 'GTDepth'}]},
    'fp16': {'loss_scale': {'growth_interval': 2000}},
    'gt_paste_stop_epoch': -1,
    'image_size': [256, 704],
    'input_modality': {   'use_camera': True,
                          'use_external': False,
                          'use_lidar': True,
                          'use_map': False,
                          'use_radar': False},
    'load_augmented': None,
    'load_dim': 5,
    'load_from': None,
    'log_config': {   'hooks': [   {'type': 'TextLoggerHook'},
                                   {'type': 'TensorboardLoggerHook'}],
                      'interval': 50},
    'lr_config': {   'min_lr_ratio': 0.001,
                     'policy': 'CosineAnnealing',
                     'warmup': 'linear',
                     'warmup_iters': 500,
                     'warmup_ratio': 0.33333333},
    'map_classes': [   'drivable_area',
                       'ped_crossing',
                       'walkway',
                       'stop_line',
                       'carpark_area',
                       'divider'],
    'max_epochs': 6,
    'model': {   'decoder': {   'backbone': {   'conv_cfg': {   'bias': False,
                                                                'type': 'Conv2d'},
                                                'in_channels': 256,
                                                'layer_nums': [5, 5],
                                                'layer_strides': [1, 2],
                                                'norm_cfg': {   'eps': 0.001,
                                                                'momentum': 0.01,
                                                                'type': 'BN'},
                                                'out_channels': [128, 256],
                                                'type': 'SECOND'},
                                'neck': {   'in_channels': [128, 256],
                                            'norm_cfg': {   'eps': 0.001,
                                                            'momentum': 0.01,
                                                            'type': 'BN'},
                                            'out_channels': [256, 256],
                                            'type': 'SECONDFPN',
                                            'upsample_cfg': {   'bias': False,
                                                                'type': 'deconv'},
                                            'upsample_strides': [1, 2],
                                            'use_conv_for_no_stride': True}},
                 'encoders': {   'camera': {   'backbone': {   'attn_drop_rate': 0.0,
                                                               'convert_weights': True,
                                                               'depths': [   2,
                                                                             2,
                                                                             6,
                                                                             2],
                                                               'drop_path_rate': 0.2,
                                                               'drop_rate': 0.0,
                                                               'embed_dims': 96,
                                                               'init_cfg': {   'checkpoint': 'pretrained/swint-nuimages-pretrained.pth',
                                                                               'type': 'Pretrained'},
                                                               'mlp_ratio': 4,
                                                               'num_heads': [   3,
                                                                                6,
                                                                                12,
                                                                                24],
                                                               'out_indices': [   1,
                                                                                  2,
                                                                                  3],
                                                               'patch_norm': True,
                                                               'qk_scale': None,
                                                               'qkv_bias': True,
                                                               'type': 'SwinTransformer',
                                                               'window_size': 7,
                                                               'with_cp': False},
                                               'neck': {   'act_cfg': {   'inplace': True,
                                                                          'type': 'ReLU'},
                                                           'in_channels': [   192,
                                                                              384,
                                                                              768],
                                                           'norm_cfg': {   'requires_grad': True,
                                                                           'type': 'BN2d'},
                                                           'num_outs': 3,
                                                           'out_channels': 256,
                                                           'start_level': 0,
                                                           'type': 'GeneralizedLSSFPN',
                                                           'upsample_cfg': {   'align_corners': False,
                                                                               'mode': 'bilinear'}},
                                               'vtransform': {   'dbound': [   1.0,
                                                                               60.0,
                                                                               0.5],
                                                                 'downsample': 2,
                                                                 'feature_size': [   32,
                                                                                     88],
                                                                 'image_size': [   256,
                                                                                   704],
                                                                 'in_channels': 256,
                                                                 'out_channels': 80,
                                                                 'type': 'DepthLSSTransform',
                                                                 'xbound': [   -54.0,
                                                                               54.0,
                                                                               0.3],
                                                                 'ybound': [   -54.0,
                                                                               54.0,
                                                                               0.3],
                                                                 'zbound': [   -10.0,
                                                                               10.0,
                                                                               20.0]}},
                                 'lidar': {   'backbone': {   'block_type': 'basicblock',
                                                              'encoder_channels': [   [   16,
                                                                                          16,
                                                                                          32],
                                                                                      [   32,
                                                                                          32,
                                                                                          64],
                                                                                      [   64,
                                                                                          64,
                                                                                          128],
                                                                                      [   128,
                                                                                          128]],
                                                              'encoder_paddings': [   [   0,
                                                                                          0,
                                                                                          1],
                                                                                      [   0,
                                                                                          0,
                                                                                          1],
                                                                                      [   0,
                                                                                          0,
                                                                                          [   1,
                                                                                              1,
                                                                                              0]],
                                                                                      [   0,
                                                                                          0]],
                                                              'in_channels': 5,
                                                              'order': [   'conv',
                                                                           'norm',
                                                                           'act'],
                                                              'output_channels': 128,
                                                              'sparse_shape': [   1440,
                                                                                  1440,
                                                                                  41],
                                                              'type': 'SparseEncoder'},
                                              'voxelize': {   'max_num_points': 10,
                                                              'max_voxels': [   120000,
                                                                                160000],
                                                              'point_cloud_range': [   -54.0,
                                                                                       -54.0,
                                                                                       -5.0,
                                                                                       54.0,
                                                                                       54.0,
                                                                                       3.0],
                                                              'voxel_size': [   0.075,
                                                                                0.075,
                                                                                0.2]}}},
                 'fuser': {   'in_channels': [80, 256],
                              'out_channels': 256,
                              'type': 'MetaFuser'},
                 'heads': {   'map': None,
                              'object': {   'activation': 'relu',
                                            'auxiliary': True,
                                            'bbox_coder': {   'code_size': 10,
                                                              'out_size_factor': 8,
                                                              'pc_range': [   -54.0,
                                                                              -54.0],
                                                              'post_center_range': [   -61.2,
                                                                                       -61.2,
                                                                                       -10.0,
                                                                                       61.2,
                                                                                       61.2,
                                                                                       10.0],
                                                              'score_threshold': 0.0,
                                                              'type': 'TransFusionBBoxCoder',
                                                              'voxel_size': [   0.075,
                                                                                0.075]},
                                            'bn_momentum': 0.1,
                                            'common_heads': {   'center': [   2,
                                                                              2],
                                                                'dim': [3, 2],
                                                                'height': [   1,
                                                                              2],
                                                                'rot': [2, 2],
                                                                'vel': [2, 2]},
                                            'dropout': 0.1,
                                            'ffn_channel': 256,
                                            'hidden_channel': 128,
                                            'in_channels': 512,
                                            'loss_bbox': {   'loss_weight': 0.25,
                                                             'reduction': 'mean',
                                                             'type': 'L1Loss'},
                                            'loss_cls': {   'alpha': 0.25,
                                                            'gamma': 2.0,
                                                            'loss_weight': 1.0,
                                                            'reduction': 'mean',
                                                            'type': 'FocalLoss',
                                                            'use_sigmoid': True},
                                            'loss_heatmap': {   'loss_weight': 1.0,
                                                                'reduction': 'mean',
                                                                'type': 'GaussianFocalLoss'},
                                            'nms_kernel_size': 3,
                                            'num_classes': 10,
                                            'num_decoder_layers': 1,
                                            'num_heads': 8,
                                            'num_proposals': 200,
                                            'test_cfg': {   'dataset': 'nuScenes',
                                                            'grid_size': [   1440,
                                                                             1440,
                                                                             41],
                                                            'nms_type': None,
                                                            'out_size_factor': 8,
                                                            'pc_range': [   -54.0,
                                                                            -54.0],
                                                            'voxel_size': [   0.075,
                                                                              0.075]},
                                            'train_cfg': {   'assigner': {   'cls_cost': {   'alpha': 0.25,
                                                                                             'gamma': 2.0,
                                                                                             'type': 'FocalLossCost',
                                                                                             'weight': 0.15},
                                                                             'iou_calculator': {   'coordinate': 'lidar',
                                                                                                   'type': 'BboxOverlaps3D'},
                                                                             'iou_cost': {   'type': 'IoU3DCost',
                                                                                             'weight': 0.25},
                                                                             'reg_cost': {   'type': 'BBoxBEVL1Cost',
                                                                                             'weight': 0.25},
                                                                             'type': 'HungarianAssigner3D'},
                                                             'code_weights': [   1.0,
                                                                                 1.0,
                                                                                 1.0,
                                                                                 1.0,
                                                                                 1.0,
                                                                                 1.0,
                                                                                 1.0,
                                                                                 1.0,
                                                                                 0.2,
                                                                                 0.2],
                                                             'dataset': 'nuScenes',
                                                             'gaussian_overlap': 0.1,
                                                             'grid_size': [   1440,
                                                                              1440,
                                                                              41],
                                                             'min_radius': 2,
                                                             'out_size_factor': 8,
                                                             'point_cloud_range': [   -54.0,
                                                                                      -54.0,
                                                                                      -5.0,
                                                                                      54.0,
                                                                                      54.0,
                                                                                      3.0],
                                                             'pos_weight': -1,
                                                             'voxel_size': [   0.075,
                                                                               0.075,
                                                                               0.2]},
                                            'type': 'TransFusionHead'}},
                 'type': 'BEVFusion'},
    'momentum_config': {'policy': 'cyclic'},
    'object_classes': [   'car',
                          'truck',
                          'construction_vehicle',
                          'bus',
                          'trailer',
                          'barrier',
                          'motorcycle',
                          'bicycle',
                          'pedestrian',
                          'traffic_cone'],
    'optimizer': {'lr': 0.0002, 'type': 'AdamW', 'weight_decay': 0.01},
    'optimizer_config': {'grad_clip': {'max_norm': 35, 'norm_type': 2}},
    'point_cloud_range': [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0],
    'radar_compensate_velocity': True,
    'radar_filtering': 'none',
    'radar_jitter': 0,
    'radar_max_points': 2500,
    'radar_normalize': False,
    'radar_sweeps': 6,
    'radar_use_dims': [   0,
                          1,
                          2,
                          5,
                          8,
                          9,
                          18,
                          19,
                          20,
                          21,
                          22,
                          23,
                          24,
                          25,
                          26,
                          27,
                          28,
                          29,
                          30,
                          31,
                          32,
                          33,
                          34,
                          35,
                          36,
                          37,
                          38,
                          39,
                          40,
                          41,
                          42,
                          43,
                          44,
                          45,
                          46,
                          47,
                          48,
                          49,
                          50,
                          51,
                          52,
                          53,
                          54,
                          55,
                          56],
    'radar_voxel_size': [0.8, 0.8, 8],
    'reduce_beams': 32,
    'resume_from': None,
    'run_dir': 'runs/run-3e901586-8e5760f8',
    'runner': {'max_epochs': 6, 'type': 'CustomEpochBasedRunner'},
    'seed': 0,
    'test_pipeline': [   {   'to_float32': True,
                             'type': 'LoadMultiViewImageFromFiles'},
                         {   'coord_type': 'LIDAR',
                             'load_augmented': None,
                             'load_dim': 5,
                             'reduce_beams': 32,
                             'type': 'LoadPointsFromFile',
                             'use_dim': 5},
                         {   'load_augmented': None,
                             'load_dim': 5,
                             'pad_empty_sweeps': True,
                             'reduce_beams': 32,
                             'remove_close': True,
                             'sweeps_num': 9,
                             'type': 'LoadPointsFromMultiSweeps',
                             'use_dim': 5},
                         {   'compensate_velocity': True,
                             'filtering': 'none',
                             'load_dim': 18,
                             'max_num': 2500,
                             'normalize': False,
                             'sweeps_num': 6,
                             'type': 'LoadRadarPointsMultiSweeps',
                             'use_dim': [   0,
                                            1,
                                            2,
                                            5,
                                            8,
                                            9,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56]},
                         {   'type': 'LoadAnnotations3D',
                             'with_attr_label': False,
                             'with_bbox_3d': True,
                             'with_label_3d': True},
                         {   'bot_pct_lim': [0.0, 0.0],
                             'final_dim': [256, 704],
                             'is_train': False,
                             'rand_flip': False,
                             'resize_lim': [0.48, 0.48],
                             'rot_lim': [0.0, 0.0],
                             'type': 'ImageAug3D'},
                         {   'is_train': False,
                             'resize_lim': [1.0, 1.0],
                             'rot_lim': [0.0, 0.0],
                             'trans_lim': 0.0,
                             'type': 'GlobalRotScaleTrans'},
                         {   'point_cloud_range': [   -54.0,
                                                      -54.0,
                                                      -5.0,
                                                      54.0,
                                                      54.0,
                                                      3.0],
                             'type': 'PointsRangeFilter'},
                         {   'mean': [0.485, 0.456, 0.406],
                             'std': [0.229, 0.224, 0.225],
                             'type': 'ImageNormalize'},
                         {   'classes': [   'car',
                                            'truck',
                                            'construction_vehicle',
                                            'bus',
                                            'trailer',
                                            'barrier',
                                            'motorcycle',
                                            'bicycle',
                                            'pedestrian',
                                            'traffic_cone'],
                             'type': 'DefaultFormatBundle3D'},
                         {   'keys': [   'img',
                                         'points',
                                         'radar',
                                         'gt_bboxes_3d',
                                         'gt_labels_3d'],
                             'meta_keys': [   'camera_intrinsics',
                                              'camera2ego',
                                              'lidar2ego',
                                              'lidar2camera',
                                              'lidar2image',
                                              'camera2lidar',
                                              'img_aug_matrix',
                                              'lidar_aug_matrix'],
                             'type': 'Collect3D'},
                         {'keyframe_only': True, 'type': 'GTDepth'}],
    'train_pipeline': [   {   'to_float32': True,
                              'type': 'LoadMultiViewImageFromFiles'},
                          {   'coord_type': 'LIDAR',
                              'load_augmented': None,
                              'load_dim': 5,
                              'reduce_beams': 32,
                              'type': 'LoadPointsFromFile',
                              'use_dim': 5},
                          {   'load_augmented': None,
                              'load_dim': 5,
                              'pad_empty_sweeps': True,
                              'reduce_beams': 32,
                              'remove_close': True,
                              'sweeps_num': 0,
                              'type': 'LoadPointsFromMultiSweeps',
                              'use_dim': 5},
                          {   'compensate_velocity': True,
                              'filtering': 'none',
                              'load_dim': 18,
                              'max_num': 2500,
                              'normalize': False,
                              'sweeps_num': 6,
                              'type': 'LoadRadarPointsMultiSweeps',
                              'use_dim': [   0,
                                             1,
                                             2,
                                             5,
                                             8,
                                             9,
                                             18,
                                             19,
                                             20,
                                             21,
                                             22,
                                             23,
                                             24,
                                             25,
                                             26,
                                             27,
                                             28,
                                             29,
                                             30,
                                             31,
                                             32,
                                             33,
                                             34,
                                             35,
                                             36,
                                             37,
                                             38,
                                             39,
                                             40,
                                             41,
                                             42,
                                             43,
                                             44,
                                             45,
                                             46,
                                             47,
                                             48,
                                             49,
                                             50,
                                             51,
                                             52,
                                             53,
                                             54,
                                             55,
                                             56]},
                          {   'type': 'LoadAnnotations3D',
                              'with_attr_label': False,
                              'with_bbox_3d': True,
                              'with_label_3d': True},
                          {   'db_sampler': {   'classes': [   'car',
                                                               'truck',
                                                               'construction_vehicle',
                                                               'bus',
                                                               'trailer',
                                                               'barrier',
                                                               'motorcycle',
                                                               'bicycle',
                                                               'pedestrian',
                                                               'traffic_cone'],
                                                'dataset_root': 'data/nuscenes/',
                                                'info_path': 'data/nuscenes/nuscenes_dbinfos_train.pkl',
                                                'points_loader': {   'coord_type': 'LIDAR',
                                                                     'load_dim': 5,
                                                                     'reduce_beams': 32,
                                                                     'type': 'LoadPointsFromFile',
                                                                     'use_dim': 5},
                                                'prepare': {   'filter_by_difficulty': [   -1],
                                                               'filter_by_min_points': {   'barrier': 5,
                                                                                           'bicycle': 5,
                                                                                           'bus': 5,
                                                                                           'car': 5,
                                                                                           'construction_vehicle': 5,
                                                                                           'motorcycle': 5,
                                                                                           'pedestrian': 5,
                                                                                           'traffic_cone': 5,
                                                                                           'trailer': 5,
                                                                                           'truck': 5}},
                                                'rate': 1.0,
                                                'sample_groups': {   'barrier': 2,
                                                                     'bicycle': 6,
                                                                     'bus': 4,
                                                                     'car': 2,
                                                                     'construction_vehicle': 7,
                                                                     'motorcycle': 6,
                                                                     'pedestrian': 2,
                                                                     'traffic_cone': 2,
                                                                     'trailer': 6,
                                                                     'truck': 3}},
                              'stop_epoch': -1,
                              'type': 'ObjectPaste'},
                          {   'bot_pct_lim': [0.0, 0.0],
                              'final_dim': [256, 704],
                              'is_train': True,
                              'rand_flip': True,
                              'resize_lim': [0.38, 0.55],
                              'rot_lim': [-5.4, 5.4],
                              'type': 'ImageAug3D'},
                          {   'is_train': True,
                              'resize_lim': [0.9, 1.1],
                              'rot_lim': [-0.78539816, 0.78539816],
                              'trans_lim': 0.5,
                              'type': 'GlobalRotScaleTrans'},
                          {'type': 'RandomFlip3D'},
                          {   'point_cloud_range': [   -54.0,
                                                       -54.0,
                                                       -5.0,
                                                       54.0,
                                                       54.0,
                                                       3.0],
                              'type': 'PointsRangeFilter'},
                          {   'point_cloud_range': [   -54.0,
                                                       -54.0,
                                                       -5.0,
                                                       54.0,
                                                       54.0,
                                                       3.0],
                              'type': 'ObjectRangeFilter'},
                          {   'classes': [   'car',
                                             'truck',
                                             'construction_vehicle',
                                             'bus',
                                             'trailer',
                                             'barrier',
                                             'motorcycle',
                                             'bicycle',
                                             'pedestrian',
                                             'traffic_cone'],
                              'type': 'ObjectNameFilter'},
                          {   'mean': [0.485, 0.456, 0.406],
                              'std': [0.229, 0.224, 0.225],
                              'type': 'ImageNormalize'},
                          {   'fixed_prob': True,
                              'max_epoch': 6,
                              'mode': 1,
                              'offset': False,
                              'prob': 0.0,
                              'ratio': 0.5,
                              'rotate': 1,
                              'type': 'GridMask',
                              'use_h': True,
                              'use_w': True},
                          {'type': 'PointShuffle'},
                          {   'classes': [   'car',
                                             'truck',
                                             'construction_vehicle',
                                             'bus',
                                             'trailer',
                                             'barrier',
                                             'motorcycle',
                                             'bicycle',
                                             'pedestrian',
                                             'traffic_cone'],
                              'type': 'DefaultFormatBundle3D'},
                          {   'keys': [   'img',
                                          'points',
                                          'radar',
                                          'gt_bboxes_3d',
                                          'gt_labels_3d'],
                              'meta_keys': [   'camera_intrinsics',
                                               'camera2ego',
                                               'lidar2ego',
                                               'lidar2camera',
                                               'lidar2image',
                                               'camera2lidar',
                                               'img_aug_matrix',
                                               'lidar_aug_matrix'],
                              'type': 'Collect3D'},
                          {'keyframe_only': True, 'type': 'GTDepth'}],
    'use_dim': 5,
    'voxel_size': [0.075, 0.075, 0.2]}
2024-03-14 22:28:50,524 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2024-03-14 22:29:12,715 - mmdet3d - INFO - load 65262 truck database infos
2024-03-14 22:29:12,715 - mmdet3d - INFO - load 161928 pedestrian database infos
2024-03-14 22:29:12,715 - mmdet3d - INFO - load 339949 car database infos
2024-03-14 22:29:12,716 - mmdet3d - INFO - load 2120 movable_object.debris database infos
2024-03-14 22:29:12,716 - mmdet3d - INFO - load 62964 traffic_cone database infos
2024-03-14 22:29:12,716 - mmdet3d - INFO - load 8846 motorcycle database infos
2024-03-14 22:29:12,716 - mmdet3d - INFO - load 2259 static_object.bicycle_rack database infos
2024-03-14 22:29:12,716 - mmdet3d - INFO - load 19195 movable_object.pushable_pullable database infos
2024-03-14 22:29:12,716 - mmdet3d - INFO - load 11 vehicle.emergency.ambulance database infos
2024-03-14 22:29:12,717 - mmdet3d - INFO - load 11050 construction_vehicle database infos
2024-03-14 22:29:12,717 - mmdet3d - INFO - load 19202 trailer database infos
2024-03-14 22:29:12,717 - mmdet3d - INFO - load 107507 barrier database infos
2024-03-14 22:29:12,717 - mmdet3d - INFO - load 8185 bicycle database infos
2024-03-14 22:29:12,717 - mmdet3d - INFO - load 12286 bus database infos
2024-03-14 22:29:12,717 - mmdet3d - INFO - load 498 vehicle.emergency.police database infos
2024-03-14 22:29:12,717 - mmdet3d - INFO - load 751 human.pedestrian.stroller database infos
2024-03-14 22:29:12,717 - mmdet3d - INFO - load 619 animal database infos
2024-03-14 22:29:12,718 - mmdet3d - INFO - load 492 human.pedestrian.wheelchair database infos
2024-03-14 22:29:12,718 - mmdet3d - INFO - load 352 human.pedestrian.personal_mobility database infos
2024-03-14 22:29:13,429 - mmdet3d - INFO - After filter database:
2024-03-14 22:29:13,430 - mmdet3d - INFO - load 51854 truck database infos
2024-03-14 22:29:13,431 - mmdet3d - INFO - load 122405 pedestrian database infos
2024-03-14 22:29:13,431 - mmdet3d - INFO - load 214084 car database infos
2024-03-14 22:29:13,431 - mmdet3d - INFO - load 2120 movable_object.debris database infos
2024-03-14 22:29:13,431 - mmdet3d - INFO - load 39825 traffic_cone database infos
2024-03-14 22:29:13,432 - mmdet3d - INFO - load 6584 motorcycle database infos
2024-03-14 22:29:13,432 - mmdet3d - INFO - load 2259 static_object.bicycle_rack database infos
2024-03-14 22:29:13,432 - mmdet3d - INFO - load 19195 movable_object.pushable_pullable database infos
2024-03-14 22:29:13,432 - mmdet3d - INFO - load 11 vehicle.emergency.ambulance database infos
2024-03-14 22:29:13,432 - mmdet3d - INFO - load 9803 construction_vehicle database infos
2024-03-14 22:29:13,433 - mmdet3d - INFO - load 16770 trailer database infos
2024-03-14 22:29:13,433 - mmdet3d - INFO - load 87434 barrier database infos
2024-03-14 22:29:13,433 - mmdet3d - INFO - load 5984 bicycle database infos
2024-03-14 22:29:13,433 - mmdet3d - INFO - load 10100 bus database infos
2024-03-14 22:29:13,433 - mmdet3d - INFO - load 498 vehicle.emergency.police database infos
2024-03-14 22:29:13,434 - mmdet3d - INFO - load 751 human.pedestrian.stroller database infos
2024-03-14 22:29:13,434 - mmdet3d - INFO - load 619 animal database infos
2024-03-14 22:29:13,434 - mmdet3d - INFO - load 492 human.pedestrian.wheelchair database infos
2024-03-14 22:29:13,434 - mmdet3d - INFO - load 352 human.pedestrian.personal_mobility database infos
/opt/conda/lib/python3.8/site-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  /opt/conda/conda-bld/pytorch_1639180588308/work/aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
2024-03-14 22:29:13,956 - mmdet - INFO - load checkpoint from local path: pretrained/swint-nuimages-pretrained.pth
2024-03-14 22:29:14,890 - mmdet - INFO - load checkpoint from local path: pretrained/swint-nuimages-pretrained.pth
2024-03-14 22:29:14,965 - mmdet3d - INFO - Model:
BEVFusion(
  (encoders): ModuleDict(
    (camera): ModuleDict(
      (backbone): SwinTransformer(
        (patch_embed): PatchEmbed(
          (adap_padding): AdaptivePadding()
          (projection): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
          (norm): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
        )
        (drop_after_pos): Dropout(p=0.0, inplace=False)
        (stages): ModuleList(
          (0): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=96, out_features=288, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=96, out_features=96, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((96,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=96, out_features=384, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=384, out_features=96, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=384, out_features=192, bias=False)
            )
          )
          (1): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=192, out_features=576, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=192, out_features=192, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=192, out_features=768, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=768, out_features=192, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=768, out_features=384, bias=False)
            )
          )
          (2): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (2): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (3): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (4): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (5): SwinBlock(
                (norm1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=384, out_features=1152, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=384, out_features=384, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=384, out_features=1536, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=1536, out_features=384, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
            (downsample): PatchMerging(
              (adap_padding): AdaptivePadding()
              (sampler): Unfold(kernel_size=(2, 2), dilation=(1, 1), padding=(0, 0), stride=(2, 2))
              (norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
              (reduction): Linear(in_features=1536, out_features=768, bias=False)
            )
          )
          (3): SwinBlockSequence(
            (blocks): ModuleList(
              (0): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
              (1): SwinBlock(
                (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (attn): ShiftWindowMSA(
                  (w_msa): WindowMSA(
                    (qkv): Linear(in_features=768, out_features=2304, bias=True)
                    (attn_drop): Dropout(p=0.0, inplace=False)
                    (proj): Linear(in_features=768, out_features=768, bias=True)
                    (proj_drop): Dropout(p=0.0, inplace=False)
                    (softmax): Softmax(dim=-1)
                  )
                  (drop): DropPath()
                )
                (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
                (ffn): FFN(
                  (activate): GELU()
                  (layers): Sequential(
                    (0): Sequential(
                      (0): Linear(in_features=768, out_features=3072, bias=True)
                      (1): GELU()
                      (2): Dropout(p=0.0, inplace=False)
                    )
                    (1): Linear(in_features=3072, out_features=768, bias=True)
                    (2): Dropout(p=0.0, inplace=False)
                  )
                  (dropout_layer): DropPath()
                )
              )
            )
          )
        )
        (norm1): LayerNorm((192,), eps=1e-05, elementwise_affine=True)
        (norm2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)
        (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      )
      init_cfg={'type': 'Pretrained', 'checkpoint': 'pretrained/swint-nuimages-pretrained.pth'}
      (neck): GeneralizedLSSFPN(
        (lateral_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(448, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(1152, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
        (fpn_convs): ModuleList(
          (0): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): ConvModule(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
        )
      )
      (vtransform): DepthLSSTransform(
        (dtransform): Sequential(
          (0): Conv2d(1, 8, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(8, 32, kernel_size=(5, 5), stride=(4, 4), padding=(2, 2))
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(32, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2))
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
        (depthnet): Sequential(
          (0): Conv2d(320, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 198, kernel_size=(1, 1), stride=(1, 1))
        )
        (downsample): Sequential(
          (0): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(80, 80, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (4): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
        )
      )
    )
    (lidar): ModuleDict(
      (voxelize): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54.0, -54.0, -5.0, 54.0, 54.0, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
      (backbone): SparseEncoder(
        (conv_input): SparseSequential(
          (0): SubMConv3d()
          (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (encoder_layers): SparseSequential(
          (encoder_layer1): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer2): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer3): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (2): SparseSequential(
              (0): SparseConv3d()
              (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
          (encoder_layer4): SparseSequential(
            (0): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (1): SparseBasicBlock(
              (conv1): SubMConv3d()
              (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (conv2): SubMConv3d()
              (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
        (conv_out): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
  )
  (fuser): MetaFuser(
    (reference_points): Linear(in_features=256, out_features=2, bias=True)
    (query_embed): Embedding(32400, 512)
    (sinEmbed): SinePositionEmbedding()
    (cross_1): BEVEvolvingBlock(
      (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (attn): MSDeformAttn(
        (sampling_offsets): Linear(in_features=256, out_features=128, bias=True)
        (attention_weights): Linear(in_features=256, out_features=64, bias=True)
        (value_proj): Linear(in_features=256, out_features=256, bias=True)
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
      )
      (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (ffn): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Dropout(p=0.1, inplace=False)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU()
      )
    )
    (cross_2): BEVEvolvingBlock(
      (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (attn): MSDeformAttn(
        (sampling_offsets): Linear(in_features=256, out_features=128, bias=True)
        (attention_weights): Linear(in_features=256, out_features=64, bias=True)
        (value_proj): Linear(in_features=256, out_features=256, bias=True)
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
      )
      (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (ffn): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Dropout(p=0.1, inplace=False)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU()
      )
    )
    (cross_3): BEVEvolvingBlock(
      (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (attn): MSDeformAttn(
        (sampling_offsets): Linear(in_features=256, out_features=128, bias=True)
        (attention_weights): Linear(in_features=256, out_features=64, bias=True)
        (value_proj): Linear(in_features=256, out_features=256, bias=True)
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
      )
      (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (ffn): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Dropout(p=0.1, inplace=False)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU()
      )
    )
    (fuser): NaiveFuser(
      (0): Conv2d(336, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (self_1): BEVEvolvingBlock(
      (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (attn): MSDeformAttn(
        (sampling_offsets): Linear(in_features=256, out_features=128, bias=True)
        (attention_weights): Linear(in_features=256, out_features=64, bias=True)
        (value_proj): Linear(in_features=256, out_features=256, bias=True)
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
      )
      (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (ffn): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Dropout(p=0.1, inplace=False)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU()
      )
    )
    (self_2): BEVEvolvingBlock(
      (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (attn): MSDeformAttn(
        (sampling_offsets): Linear(in_features=256, out_features=128, bias=True)
        (attention_weights): Linear(in_features=256, out_features=64, bias=True)
        (value_proj): Linear(in_features=256, out_features=256, bias=True)
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
      )
      (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (ffn): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Dropout(p=0.1, inplace=False)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU()
      )
    )
  )
  (decoder): ModuleDict(
    (backbone): SECOND(
      (blocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
          (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (8): ReLU(inplace=True)
          (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (11): ReLU(inplace=True)
          (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (17): ReLU(inplace=True)
        )
      )
    )
    init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    (neck): SECONDFPN(
      (deblocks): ModuleList(
        (0): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): Sequential(
          (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
    )
    init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  )
  (heads): ModuleDict(
    (object): TransFusionHead(
      (loss_cls): FocalLoss()
      (loss_bbox): L1Loss()
      (loss_iou): VarifocalLoss()
      (loss_heatmap): GaussianFocalLoss()
      (shared_conv): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (heatmap_head): Sequential(
        (0): ConvModule(
          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (1): Conv2d(128, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (class_encoding): Conv1d(10, 128, kernel_size=(1,), stride=(1,))
      (decoder): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): Linear(in_features=128, out_features=128, bias=True)
          )
          (linear1): Linear(in_features=128, out_features=256, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=256, out_features=128, bias=True)
          (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
          (self_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
          (cross_posembed): PositionEmbeddingLearned(
            (position_embedding_head): Sequential(
              (0): Conv1d(2, 128, kernel_size=(1,), stride=(1,))
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
              (3): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (prediction_heads): ModuleList(
        (0): FFN(
          (center): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 1, kernel_size=(1,), stride=(1,))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 3, kernel_size=(1,), stride=(1,))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 2, kernel_size=(1,), stride=(1,))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv1d(128, 64, kernel_size=(1,), stride=(1,), bias=False)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv1d(64, 10, kernel_size=(1,), stride=(1,))
          )
        )
      )
    )
  )
)
2024-03-14 22:29:22,991 - mmdet3d - INFO - Start running, host: root@umic-System-Product-Name, work_dir: /media/umic/my_label/repositories/bevfusion2/runs/run-3e901586-8e5760f8
2024-03-14 22:29:22,991 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2024-03-14 22:29:22,992 - mmdet3d - INFO - workflow: [('train', 1)], max: 6 epochs
2024-03-14 22:29:22,996 - mmdet3d - INFO - Checkpoints will be saved to /media/umic/my_label/repositories/bevfusion2/runs/run-3e901586-8e5760f8 by HardDiskBackend.
/media/umic/my_label/repositories/bevfusion2/mmdet3d/models/utils/metafuser.py:51: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  dim_t = self.temperature ** (2 * (dim_t // 2) / self.num_pos_feats)
/media/umic/my_label/repositories/bevfusion2/mmdet3d/models/heads/bbox/transfusion.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  top_proposals_class = top_proposals // heatmap.shape[-1]
/media/umic/my_label/repositories/bevfusion2/mmdet3d/models/heads/bbox/transfusion.py:535: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  grid_size[:2] // self.train_cfg["out_size_factor"]
Authorization required, but no authorization protocol specified
/media/umic/my_label/repositories/bevfusion2/mmdet3d/models/utils/metafuser.py:51: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  dim_t = self.temperature ** (2 * (dim_t // 2) / self.num_pos_feats)
/media/umic/my_label/repositories/bevfusion2/mmdet3d/models/heads/bbox/transfusion.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  top_proposals_class = top_proposals // heatmap.shape[-1]
/media/umic/my_label/repositories/bevfusion2/mmdet3d/models/heads/bbox/transfusion.py:535: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  grid_size[:2] // self.train_cfg["out_size_factor"]
2024-03-14 22:31:06,933 - mmdet3d - INFO - Epoch [1][50/61790]	lr: 7.973e-05, eta: 8 days, 21:50:33, time: 2.077, data_time: 1.097, memory: 8005, loss/object/loss_heatmap: 2353.1159, loss/object/layer_-1_loss_cls: 13.5739, loss/object/layer_-1_loss_bbox: 5.6500, stats/object/matched_ious: 0.0017, loss: 2372.3397, grad_norm: nan
2024-03-14 22:32:24,619 - mmdet3d - INFO - Epoch [1][100/61790]	lr: 9.307e-05, eta: 7 days, 18:53:18, time: 1.554, data_time: 1.037, memory: 8005, loss/object/loss_heatmap: 2719.6481, loss/object/layer_-1_loss_cls: 15.7809, loss/object/layer_-1_loss_bbox: 5.5072, stats/object/matched_ious: 0.0022, loss: 2740.9362, grad_norm: nan
2024-03-14 22:33:45,456 - mmdet3d - INFO - Epoch [1][150/61790]	lr: 1.064e-04, eta: 7 days, 12:03:08, time: 1.617, data_time: 1.093, memory: 8005, loss/object/loss_heatmap: 2586.3156, loss/object/layer_-1_loss_cls: 14.9767, loss/object/layer_-1_loss_bbox: 5.8053, stats/object/matched_ious: 0.0019, loss: 2607.0976, grad_norm: 56.9373
